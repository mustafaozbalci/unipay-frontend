import React, { useState } from "react";import { useNavigate } from "react-router-dom";import { placeOrder } from "../api";import "../styles/Menu.css";const NeroMenu = ({ addNotification, onOrderPlaced }) => {  const navigate = useNavigate();  const [cart, setCart] = useState([]);  const [quantities, setQuantities] = useState({});  const menuItems = [    { id: 1, name: "Iced Latte", description: "Refreshing cold latte", price: 45 },    { id: 2, name: "Cold Brew", description: "Smooth and flavorful", price: 40 },    { id: 3, name: "Iced Americano", description: "Classic espresso over ice", price: 35 },    { id: 4, name: "Frappe", description: "Blended iced drink", price: 50 },  ];  const handleAddToCart = (item, quantity) => {    const parsedQuantity = Math.max(1, parseInt(quantity, 10) || 1);    setCart((prevCart) => {      const existingIndex = prevCart.findIndex((c) => c.id === item.id);      if (existingIndex > -1) {        const updatedCart = [...prevCart];        updatedCart[existingIndex].quantity += parsedQuantity;        return updatedCart;      }      return [...prevCart, { ...item, quantity: parsedQuantity }];    });    addNotification(`${item.name} added to cart`, 1500);  };  const handleUpdateQuantity = (itemId, newQuantity) => {    const parsedQuantity = Math.max(0, parseInt(newQuantity, 10) || 0);    if (parsedQuantity < 1) {      setCart(prev => prev.filter(item => item.id !== itemId));      return;    }    setCart(prev => prev.map(item =>        item.id === itemId ? { ...item, quantity: parsedQuantity } : item    ));  };  const handleCheckout = async () => {    const token = localStorage.getItem("authToken");    const userId = localStorage.getItem("userId");    if (!token || !userId) {      addNotification("Please log in to place an order.", 5000);      navigate("/login");      return;    }    try {      await placeOrder({        restaurantId: 1,        items: cart.map(item => ({          itemName: item.name,          quantity: item.quantity,          price: item.price,        })),        totalAmount: cart.reduce((acc, item) => acc + item.quantity * item.price, 0),      });      addNotification("ðŸš€ Your order has been placed successfully!", 5000);      if (onOrderPlaced) onOrderPlaced();      navigate("/order-tracking-users");    } catch (err) {      console.error("Order error:", err);      addNotification("Order failed. Please try again.", 5000);    }  };  return (      <div className="menu-container">        <h1 className="menu-title">CaffÃ¨ Nero - SoÄŸuk Ä°Ã§ecekler</h1>        <div className="menu-items">          {menuItems.map((item) => (              <div key={item.id} className="menu-item">                <h2>{item.name}</h2>                <p>{item.description}</p>                <p className="price">{item.price} TL</p>                <div className="quantity-selector">                  <label>Quantity:</label>                  <input                      type="number"                      min="1"                      value={quantities[item.id] || 1}                      onChange={(e) => setQuantities(prev => ({                        ...prev,                        [item.id]: e.target.value                      }))}                  />                </div>                <button onClick={() => handleAddToCart(item, quantities[item.id] || 1)}>                  Add to Cart                </button>              </div>          ))}        </div>        {cart.length > 0 && (            <div className="cart-summary">              <h3>Order Summary</h3>              <ul>                {cart.map((item) => (                    <li key={item.id}>                      <div className="cart-item-header">                        <span>{item.name}</span>                        <span>{item.price} TL</span>                      </div>                      <div className="cart-item-controls">                        <button onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}>                          -                        </button>                        <input                            type="number"                            value={item.quantity}                            onChange={(e) => handleUpdateQuantity(item.id, e.target.value)}                        />                        <button onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}>                          +                        </button>                      </div>                      <div className="cart-item-total">                        Total: {item.quantity * item.price} TL                      </div>                    </li>                ))}              </ul>              <div className="cart-total">                Grand Total: {cart.reduce((acc, item) => acc + item.quantity * item.price, 0)} TL              </div>              <button className="checkout-button" onClick={handleCheckout}>                Complete Order              </button>            </div>        )}        <button className="back-button" onClick={() => navigate("/restaurants")}>          Back to Restaurants        </button>      </div>  );};export default NeroMenu;